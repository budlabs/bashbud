#!/bin/bash

: "${XDG_CONFIG_HOME:=$HOME/.config}"
: "${BASHBUD_CONFIG_DIR:=$XDG_CONFIG_HOME/bashbud}"

main(){

  declare -g _template_dir _target_dir _cp_flag

  data_dir="$__dir"/data #bashbud
  [[ -d ETC_CONFIG_DIR ]] && data_dir='ETC_CONFIG_DIR'

  config_dir=${_o[config-dir]:-$BASHBUD_CONFIG_DIR}

  [[ -d $config_dir ]] || {
    [[ -d $data_dir ]] \
      || ERX "default configuration files not found," \
             "consider reinstalling bashbud"

    mkdir -p "$config_dir"
    ERM "copy default config from '$data_dir' to '$config_dir'"
    cp -r "$data_dir"/* -t "$config_dir"
  }

  _target_dir=$(realpath "${1:-.}")

  [[ -d $_target_dir ]] \
    || ERX "target directory: '$_target_dir' does not exist."

  _template_dir=$(realpath "$config_dir/${_o[template]}")

  if ((_o[force]))
    then _cp_flag=--force
    else _cp_flag=--update
  fi

  [[ ${_o[add]} && ${_o[template]} ]] && {
    add_files "$@"
    exit
  }

  target_name=$(basename "$_target_dir")

  [[ ${_o[template]} && -d "$_template_dir" ]] || {
    available_templates=("$config_dir"/*)
    ERX "$(printf '%s\n' "--template '${_o[template]}' not found."     \
             'usage: bashbud [--template TEMPLATE] [TARGET_DIR]' \
             ''                                                        \
             "available templates in ${config_dir/~/'~'}:"             \
             "${available_templates[@]/*\//  }"                        \
             ''
          )"
  }

  ((_o[update])) || {
    TEMPLDIR=$_template_dir \
    TARGDIR=$_target_dir    \
      find -L "$_template_dir" -type d -exec sh -c '
        for arg ; do 
          mkdir -p -- "$arg" "$TARGDIR${arg#"$TEMPLDIR"}"
        done
      ' sh {} +
  }

  while read -rsd '' template_file ; do

    target_file=${template_file/"$_template_dir"/$_target_dir}
    linked_file=$(readlink -f "$template_file")

    [[ ${_o[update]} ]] && {
      [[ -f $target_file ]] \
        && cp "$_cp_flag" "$target_file" "$linked_file"
      continue
    }

    case "$template_file" in
      # only copy options if it doesn't exist
      "$_template_dir"/options )
        [[ -f $target_file ]] && continue
        cp "$linked_file" "$target_file"
      ;;

      # prepend keys to config.mak
      "$_template_dir"/config.mak )
        [[ -f $target_file ]] || {
          printf "NAME        := %s\n" "$target_name"
          printf "CREATED     := %(%Y-%m-%d)T\n" -1
          cat "$template_file"
        } > "${_target_dir}/config.mak"
      ;;

      # rename main.sh, but only if target doens't exist
      "$_template_dir"/main.sh )
        target_file="${_target_dir}/$target_name"
        [[ -f $target_file ]] && continue
        cp "$linked_file" "$target_file"
      ;;

      # other files are overwritten if --force is set
      * )
        
        if ((_o[force]))
          then cp --force "$linked_file" "$target_file"
        elif ((_o[pull]))
          then cp --update "$linked_file" "$target_file"
        elif [[ ! -f $target_file ]]
          then cp "$linked_file" "$target_file"
        fi
      ;;
    esac

  done < <(find -L "$_template_dir" -type f -print0)

  [[ -f "$_target_dir"/GNUmakefile && ! "${_o[update]}" ]] \
    && make -C "$_target_dir"
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud
